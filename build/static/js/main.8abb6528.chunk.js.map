{"version":3,"sources":["index.js"],"names":["Header","className","href","PageContent","SignupForm","initialValues","firstName","password","userType","email","validationSchema","Yup","max","required","min","shape","onSubmit","values","setSubmitting","setTimeout","alert","JSON","stringify","formik","handleSubmit","id","type","getFieldProps","placeholder","htmlFor","touched","errors","value","label","TermsAndcondText","Container","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"+KAAA,kEAMMA,EAAS,WACb,OACE,oCACE,yDACA,sDAC2B,IACzB,uBAAGC,UAAU,OAAOC,KAAK,KAAzB,cAOFC,EAAc,WAClB,OACE,oCACE,6CACA,2YAYAC,EAAa,WACjB,OACE,kBAAC,IAAD,CACEC,cAAe,CAAEC,UAAW,GAAIC,SAAU,GAAIC,SAAU,GAAIC,MAAO,IACnEC,iBAAkBC,IAAW,CAC3BL,UAAWK,MACRC,IAAI,GAAI,iCACRC,SAAS,YACZN,SAAUI,MAAaG,IAAI,EAAG,YAAYD,SAAS,YACnDL,SAAUG,MAAaI,MAAM,CAC3BP,SAAUG,MAAaE,SAAS,4BAElCJ,MAAOE,MAAaF,MAAM,yBAAyBI,SAAS,cAE9DG,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBC,YAAW,WACTC,MAAMC,KAAKC,UAAUL,EAAQ,KAAM,IACnCC,GAAc,KACb,QAGJ,SAACK,GAAD,OACC,0BAAMP,SAAUO,EAAOC,aAAcvB,UAAU,eAC7C,yBAAKA,UAAU,eACb,yCACEA,UAAU,cACVwB,GAAG,YACHC,KAAK,QACDH,EAAOI,cAAc,aAJ3B,CAKEC,YAAY,eAEd,2BAAOC,QAAQ,YAAY5B,UAAU,eAArC,aAICsB,EAAOO,QAAQxB,WAAaiB,EAAOQ,OAAOzB,UACzC,yBAAKL,UAAU,SAASsB,EAAOQ,OAAOzB,WACpC,MAEN,yBAAKL,UAAU,eACb,yCACEwB,GAAG,QACHC,KAAK,SACDH,EAAOI,cAAc,SAH3B,CAIEC,YAAY,gBACZ3B,UAAU,iBAEZ,2BAAO4B,QAAQ,QAAQ5B,UAAU,eAAjC,iBAGCsB,EAAOO,QAAQrB,OAASc,EAAOQ,OAAOtB,MACrC,yBAAKR,UAAU,SAASsB,EAAOQ,OAAOtB,OACpC,MAGN,0CACER,UAAU,cACVwB,GAAG,YACCF,EAAOI,cAAc,aAEzB,4BAAQK,MAAM,GAAGC,MAAM,oCAAvB,oCAGA,4BAAQD,MAAM,KAAKC,MAAM,MAAzB,MAGA,4BAAQD,MAAM,SAASC,MAAM,UAA7B,WAIF,yBAAKhC,UAAU,eACb,yCACEA,UAAU,cACVwB,GAAG,WACHC,KAAK,YACDH,EAAOI,cAAc,YAJ3B,CAKEC,YAAY,cAEd,2BAAOC,QAAQ,WAAW5B,UAAU,eAApC,YAGCsB,EAAOO,QAAQvB,UAAYgB,EAAOQ,OAAOxB,SACxC,yBAAKN,UAAU,SAASsB,EAAOQ,OAAOxB,UACpC,MAGN,4BAAQmB,KAAK,SAASzB,UAAU,YAAhC,aAQJiC,EAAmB,WACvB,OACE,uGAC4E,IAC1E,uBAAGhC,KAAK,IAAID,UAAU,QAAtB,oBAGA,uCACA,uBAAGC,KAAK,IAAID,UAAU,QAAtB,oBAMAkC,EAAY,WAChB,OACE,yBAAKlC,UAAU,aACb,yBAAKA,UAAU,YACb,kBAACD,EAAD,MACA,kBAACI,EAAD,MACA,kBAAC8B,EAAD,OAEF,yBAAKjC,UAAU,aACb,kBAACE,EAAD,SAMR,SAASiC,IACP,OAAO,kBAACD,EAAD,MAGT,IAAME,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAACL,EAAD,MAASC,I","file":"static/js/main.8abb6528.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst Header = () => {\n  return (\n    <>\n      <h1>Let's set up your account</h1>\n      <p>\n        Already have an account?{\" \"}\n        <a className=\"link\" href=\"/\">\n          Sign in\n        </a>\n      </p>\n    </>\n  );\n};\nconst PageContent = () => {\n  return (\n    <>\n      <h1>Dummy Heading</h1>\n      <p>\n        Diam dolore accusam justo gubergren ipsum magna velit nonumy ipsum\n        praesent at clita duo eros duis invidunt dolores. Dolor eirmod molestie\n        vel adipiscing ut accusam id dolor nam. Et voluptua aliquyam. At ea amet\n        erat sed lorem aliquam justo sea kasd elitr gubergren velit ullamcorper\n        doming stet sadipscing. Et et ea vero diam est dolor nonumy sed diam\n        aliquyam.\n      </p>\n    </>\n  );\n};\n\nconst SignupForm = () => {\n  return (\n    <Formik\n      initialValues={{ firstName: \"\", password: \"\", userType: \"\", email: \"\" }}\n      validationSchema={Yup.object({\n        firstName: Yup.string()\n          .max(15, \"Must be 15 characters or less\")\n          .required(\"Required\"),\n        password: Yup.string().min(8, \"Required\").required(\"Required\"),\n        userType: Yup.object().shape({\n          userType: Yup.string().required(\"User type is required!\"),\n        }),\n        email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      {(formik) => (\n        <form onSubmit={formik.handleSubmit} className=\"signUp-Form\">\n          <div className=\"field-group\">\n            <input\n              className=\"input-field\"\n              id=\"firstName\"\n              type=\"text\"\n              {...formik.getFieldProps(\"firstName\")}\n              placeholder=\"Your name\"\n            />\n            <label htmlFor=\"firstName\" className=\"field-label\">\n              Your name\n            </label>\n\n            {formik.touched.firstName && formik.errors.firstName ? (\n              <div className=\"error\">{formik.errors.firstName}</div>\n            ) : null}\n          </div>\n          <div className=\"field-group\">\n            <input\n              id=\"email\"\n              type=\"email\"\n              {...formik.getFieldProps(\"email\")}\n              placeholder=\"Email address\"\n              className=\"input-field\"\n            />\n            <label htmlFor=\"email\" className=\"field-label\">\n              Email address\n            </label>\n            {formik.touched.email && formik.errors.email ? (\n              <div className=\"error\">{formik.errors.email}</div>\n            ) : null}\n          </div>\n\n          <select\n            className=\"input-field\"\n            id=\"userType\"\n            {...formik.getFieldProps(\"userType\")}\n          >\n            <option value=\"\" label=\"I would describe my user type as\">\n              I would describe my user type as\n            </option>\n            <option value=\"it\" label=\"IT\">\n              IT\n            </option>\n            <option value=\"design\" label=\"Design\">\n              Design\n            </option>\n          </select>\n          <div className=\"field-group\">\n            <input\n              className=\"input-field\"\n              id=\"password\"\n              type=\"password\"\n              {...formik.getFieldProps(\"password\")}\n              placeholder=\"Password\"\n            />\n            <label htmlFor=\"password\" className=\"field-label\">\n              Password\n            </label>\n            {formik.touched.password && formik.errors.password ? (\n              <div className=\"error\">{formik.errors.password}</div>\n            ) : null}\n          </div>\n\n          <button type=\"submit\" className=\"next-btn\">\n            Next\n          </button>\n        </form>\n      )}\n    </Formik>\n  );\n};\nconst TermsAndcondText = () => {\n  return (\n    <p>\n      By clicking the \"Next\" button, you agree yto creating a free account, and{\" \"}\n      <a href=\"/\" className=\"link\">\n        Terms of service\n      </a>\n      <span> and </span>\n      <a href=\"/\" className=\"link\">\n        Privacy policy\n      </a>\n    </p>\n  );\n};\nconst Container = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"col left\">\n        <Header />\n        <SignupForm />\n        <TermsAndcondText />\n      </div>\n      <div className=\"col right\">\n        <PageContent />\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  return <Container />;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}